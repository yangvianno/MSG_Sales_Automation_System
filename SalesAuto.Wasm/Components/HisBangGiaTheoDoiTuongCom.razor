@using SalesAuto.Models.Entities.HisDoiTuong
@using SalesAuto.Wasm.Services

@inject IHisClient hisClient
@inject IToastService toastService
@inject DialogService dialogService
@inject ICommonUI commonUI
@inject IExportFile exportFile
@inject IJSRuntime jsRuntime

<h3>Bang giá theo đối tượng</h3>

<div class="border border-1 rounded">
    <div class="row" style="vertical-align: middle;">    
        <div class="col">
            <RadzenDropDown TValue="Guid" @bind-Value="loaiDoiTuong"  Data="@listLoaiDoiTuong" ValueProperty="ID" TextProperty="Ten" Style="vertical-align: middle;"/>            
            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="reload" Size="ButtonSize.Medium" Text="Reload" Click="@(async(args) => await  LoadDanhSach())">
            </RadzenButton>
        </div>
        
    </div>    
</div>

@if (listChinh!=null)
{
    <div class="border border-1 rounded">        
    <RadzenDataGrid @ref="danhMucGrid" AllowFiltering="true" AllowPaging="true" PageSize="40" AllowSorting="true"
        EditMode="DataGridEditMode.Single"
        AllowColumnResize="true"
        FilterMode="FilterMode.Simple"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        Data="@listChinh" TItem="BangGiaTheoDoiTuong">
        <Columns>
            <RadzenDataGridColumn Width="100px" TItem="BangGiaTheoDoiTuong" Property="MACV" Title="Mã">   
                <Template Context="row">
                    @(row.MACV)
                 </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BangGiaTheoDoiTuong" Property="TENCV" Title="Tên">  
                <Template Context="row">
                    <p style="white-space:normal"> @(row.TENCV) </p>
                 </Template>
            </RadzenDataGridColumn>     
            <RadzenDataGridColumn Width="100px" TItem="BangGiaTheoDoiTuong" Property="GIATIEN" Title="Giá dịch vụ" TextAlign="TextAlign.Right">
                <Template Context="row">
                    @if (row.ID_LoaiDoiTuong == null || row.ID_LoaiDoiTuong == Guid.Empty)
                    {
                        <span style="color:red">@(row.GIATIEN.ToString("##,##0"))</span>
                    }
                    else
                    {
                        <span>@(row.GIATIEN.ToString("##,##0"))</span>
                    }
                </Template>
                <EditTemplate Context="item">
                    <RadzenNumeric Format="0.00" @bind-Value="item.GIATIEN" Style="width: 100%; display: block" Name="GIATIEN" />
                    <RadzenRequiredValidator Text="Vui lòng điền giá dịch vụ" Component="GIATIEN" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn Width="100px" TItem="BangGiaTheoDoiTuong" Property="GIABHYT_PHAITRA" Title="Giá BHYT trả" TextAlign="TextAlign.Right">
                <Template Context="row">
                    @if (row.ID_LoaiDoiTuong == null || row.ID_LoaiDoiTuong == Guid.Empty)
                    {
                            <span style="color:red">@(row.GIABHYT_PHAITRA.ToString("##,##0"))</span>
                    }
                    else
                    {
                        <span>@(row.GIABHYT_PHAITRA.ToString("##,##0"))</span>
                    }
                </Template>
                <EditTemplate Context="item">
                    <RadzenNumeric Format="0.00" @bind-Value="item.GIABHYT_PHAITRA" Style="width: 100%; display: block" Name="GIABHYT_PHAITRA" />
                    <RadzenRequiredValidator Text="Vui lòng điền giá BHYT trả" Component="GIABHYT_PHAITRA" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn Width="100px" TItem="BangGiaTheoDoiTuong" Property="GIABHYT" Title="Chênh lệch" TextAlign="TextAlign.Right">
                  <Template Context="row">
                    @if (row.ID_LoaiDoiTuong == null || row.ID_LoaiDoiTuong == Guid.Empty)
                    {
                            <span style="color:red">@(row.GIABHYT.ToString("##,##0"))</span>
                    }
                    else
                    {
                        <span>@(row.GIABHYT.ToString("##,##0"))</span>
                    }
                </Template>
                <EditTemplate Context="item">
                    <RadzenNumeric Format="0.00" @bind-Value="item.GIABHYT" Style="width: 100%; display: block" Name="GIABHYT"/>
                    <RadzenRequiredValidator Text="Vui lòng điền chênh lệch" Component="GIABHYT" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn TItem="BangGiaTheoDoiTuong" Context="aBRDanhMuc" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="item">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(item))" @onclick:stopPropagation="true">
                </RadzenButton>               
            </Template>
            <EditTemplate Context="item">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(item))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@(async (args) => await CancelEditRow(item))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BangGiaTheoDoiTuong" Context="aBRDanhMuc" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
            <Template Context="item">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async (args) => await DeleteRow(item))" @onclick:stopPropagation="true">
                </RadzenButton>                
            </Template>
            <EditTemplate Context="item">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async(args) => await DeleteRow(item))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    </div>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<BangGiaTheoDoiTuong> listChinh;
    private List<LoaiDoiTuong> listLoaiDoiTuong;    
    private RadzenDataGrid<BangGiaTheoDoiTuong> danhMucGrid;
    private BangGiaTheoDoiTuong OldRow = new BangGiaTheoDoiTuong();
    private Guid loaiDoiTuong;
    protected override async Task OnInitializedAsync()
    {
        commonUI.BusyDialog(dialogService, "Loading...");       
        try
        {
            await LoadDanhSachDoiTuong();
            await LoadDanhSach();
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
        }
        dialogService.Close();
    }

    public async Task LoadDanhSachDoiTuong()
    {
        listLoaiDoiTuong = await hisClient.GetDanhSachDoiTuong();
    }

    public async Task LoadDanhSach()
    {
        commonUI.BusyDialog(dialogService, "Loading...");
        try
        {
            listChinh = await hisClient.GetBangGiaTheoDoiTuong(loaiDoiTuong);
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
        }
        dialogService.Close();

    }




    private async Task Export()
    {
        var pkg = await exportFile.SaveFile(listChinh);
        var fileBytes = pkg.GetAsByteArray();
        pkg.Dispose();
        var fileName = $"BaoCao.xlsx";
        await jsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }

    void EditRow(BangGiaTheoDoiTuong item)
    {
        danhMucGrid.EditRow(item);            
        GanGiaTri(OldRow, item);       

    }

    void GanGiaTri(BangGiaTheoDoiTuong oldRow, BangGiaTheoDoiTuong newRow)
    {
        oldRow.ID_LoaiDoiTuong = newRow.ID_LoaiDoiTuong;
        oldRow.GIABHYT = newRow.GIABHYT;
        oldRow.GIABHYT_PHAITRA = newRow.GIABHYT_PHAITRA;
        oldRow.GIATIEN = newRow.GIATIEN;
    }


    async Task SaveRow(BangGiaTheoDoiTuong item)
    {

        if (loaiDoiTuong != Guid.Empty)
        {
            item.ID_LoaiDoiTuong = loaiDoiTuong;
            var result = await hisClient.SaveBangGiaTheoDoiTuong(item);
            if (result != null)
            {
                toastService.ClearSuccessToasts();
                toastService.ShowSuccess("Lưu " + item.TENCV + " thành công");                
                await danhMucGrid.UpdateRow(item);
            }
            else
            {
                toastService.ShowError("Lỗi");
            }
        }
        dialogService.Close();
    }

    public async Task CancelEditRow(BangGiaTheoDoiTuong item)
    {
        danhMucGrid.CancelEditRow(item);            
        GanGiaTri(item, OldRow);            
    }

   
    async Task DeleteRow(BangGiaTheoDoiTuong item)
    {
        bool Result = (bool)await dialogService.Confirm("Bạn thực sự muốn xóa?", "Xóa", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No"});
        if (Result)
        {
            var ketqua = await hisClient.DeleteBangGiaTheoDoiTuong(item);
            if (ketqua != null)
            {
                toastService.ShowSuccess("Xóa thành công");                                
            }
            else
            {
                toastService.ShowError("Xóa bị lỗi!");
            }
        }

    }
}
