@using System.Linq
@using Microsoft.Extensions.Logging
@using SalesAuto.Models.ViewModel
@inject HttpClient Http
@inject ILogger<FileUploadComponent> Logger

<p>
    <label>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="@OnInputFileChange" multiple accept=".xlsx" />
    </label>
</p>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">                 
            @if (uploadResults == null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">...</span>
                </div>
            }
            else
            {
                <ul>
                    @foreach (var file in files)
                    {
                        <li>
                            File: @file.Name
                            <br>
                            @if (UploadFile(uploadResults, file.Name, Logger,
out var result))
                            {
                                <span>
                                    Stored File Name: @result.StoredFileName
                                </span>
                            }
                            else
                            {
                                @if (result.ErrorCode == 5)
                                {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">...</span>
                                    </div>

                                }
                                else
                                {
                                    <span>

                                        There was an error uploading the file
                                        (Error: @result.ErrorCode).
                                    </span>
                                }
                            }
                        </li>
                    }
                </ul>
            }  
                
        </div>
    </div>
}


@code {

    [Parameter]
    public string  subLink { get; set; }
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = true;
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();
        uploadResults.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/api/Filesave"+ (subLink==""?"":"/"+subLink), content);

            response.EnsureSuccessStatusCode();
            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }

        shouldRender = true;
    }

    private static bool UploadFile(IList<UploadResult> uploadResults,
        string fileName, ILogger<FileUploadComponent> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName);

        if (result is null)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result = new();
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string Name { get; set; }
    }
}