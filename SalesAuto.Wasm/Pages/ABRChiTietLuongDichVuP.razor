@page "/ABRChiTietLuongDichVuP"

@using Microsoft.AspNetCore.WebUtilities;
@using Radzen.Blazor
@using SalesAuto.Wasm.Services
@using SalesAuto.Models.ViewModel
@using SalesAuto.Wasm.Components

@inject IJSRuntime jsRuntime
@inject IABRClient aBRClient
@inject IToastService toastService
@inject DialogService dialogService
@inject ICommonUI commonUI
@inject HttpClient httpClient

@*@attribute [Authorize(Roles = "abrTinhABR, abrXetDuyet1, abrXetDuyet2")]  *@

<ABRQuaTrinhTinhABR Nam=@Nam Thang=@Thang></ABRQuaTrinhTinhABR>

<table>
    <tr>
        <td>
            <label>
                Tháng
            </label>
        </td>
        <td>
            <RadzenNumeric @bind-Value="Thang" TValue="int" Min="1" Max="12" Change=@(async () =>  await Reload())></RadzenNumeric>
        </td>
        <td>
            <label>
                Năm
            </label>
        </td>
        <td>
            <RadzenNumeric @bind-Value="Nam" TValue="int" Change=@(async () =>  await Reload())></RadzenNumeric>
        </td>
        <td>
            <button class="btn btn-success" @onclick="@(async () => await DownLoadExcel())"> Download  </button>
        </td>
    </tr>
</table
<RadzenTabs RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Bảng tổng">            
            @if (colTong != null && listTong != null)
            {
                <DynGrid listChinh="listTong" Col="colTong" />  
            }
            else
            {
                <span> Không có dữ liệu </span>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="Chi tiết">
            @if (colinfor != null && listChinh != null)
            {
                <DynGrid listChinh="listChinh" Col="colinfor" />  
            }
            else
            {
                <span> Không có dữ liệu </span>
            }
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    private int Nam;
    private int Thang;
    private IEnumerable<IDictionary<string, object>> listChinh;
    public IDictionary<string, object> colinfor;

    private IEnumerable<IDictionary<string, object>> listTong;
    public IDictionary<string, object> colTong;

    protected override async Task OnInitializedAsync()
    {
        var Ngay = DateTime.Now.AddMonths(-1);
        Thang = Ngay.Month;
        Nam = Ngay.Year;
        commonUI.BusyDialog(dialogService, "Loading...");           
        await InvokeAsync(StateHasChanged);
        await Reload();
    }

    private async Task Reload()
    {
        commonUI.BusyDialog(dialogService, "Loading...");
        try
        {
            await InvokeAsync(StateHasChanged);
            listChinh = await aBRClient.GetLuongChiTietDichVu(Thang, Nam);
            if (listChinh.Count() > 0)
            {
                colinfor = listChinh.First();
            }
            listTong = await aBRClient.GetLuongNhomDichVu(Thang, Nam);
            if (listTong.Count() > 0)
            {
                colTong = listTong.First();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        dialogService.Close();
        await InvokeAsync(StateHasChanged);
    }

    public async Task DownLoadExcel()
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Confirm download?"))
        {
            var queryStringParam = new Dictionary<string, string>
                {
                    ["nam"] = Nam.ToString(),
                    ["thang"] = Thang.ToString()
                };

            string url = QueryHelpers.AddQueryString("api/ABR/GetFileLuongChiTietDichVu", queryStringParam);
            var fileName = $"PCAFile.xlsx";
            await DownloadFile(url, fileName);
        }
    }
    private async Task DownloadFile(string url, string fileName)
        {
            toastService.ShowInfo("Đang load file ...");
            var response = await httpClient.PostAsJsonAsync(url, Nam);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                await jsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
                toastService.ShowSuccess("Lưu file hoàn tất!");
            }
            else
            {
                toastService.ShowSuccess("Lỗi!" + response.RequestMessage.ToString());
            }
        }
}
